[{"/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/index.js":"1","/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/App.js":"2","/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/pages/SearchBooks.js":"3","/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/pages/SavedBooks.js":"4","/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/components/Navbar.js":"5","/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/utils/mutations.js":"6","/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/utils/auth.js":"7","/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/utils/API.js":"8","/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/utils/localStorage.js":"9","/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/utils/queries.js":"10","/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/components/SignupForm.js":"11","/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/components/LoginForm.js":"12"},{"size":266,"mtime":1648389416932,"results":"13","hashOfConfig":"14"},{"size":839,"mtime":1648423564668,"results":"15","hashOfConfig":"14"},{"size":4863,"mtime":1648421451654,"results":"16","hashOfConfig":"14"},{"size":2673,"mtime":1648420726257,"results":"17","hashOfConfig":"14"},{"size":2524,"mtime":1648410237753,"results":"18","hashOfConfig":"14"},{"size":1073,"mtime":1648417884565,"results":"19","hashOfConfig":"14"},{"size":1234,"mtime":1648418104365,"results":"20","hashOfConfig":"14"},{"size":221,"mtime":1648417028489,"results":"21","hashOfConfig":"14"},{"size":793,"mtime":1648320879552,"results":"22","hashOfConfig":"14"},{"size":245,"mtime":1648418039056,"results":"23","hashOfConfig":"14"},{"size":3257,"mtime":1648419195585,"results":"24","hashOfConfig":"14"},{"size":2598,"mtime":1648419964538,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"x2ieeu",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},"/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/index.js",[],["55","56"],"/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/App.js",[],"/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/pages/SearchBooks.js",["57"],"import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { useMutation } from '@apollo/react-hooks';\nimport { SAVE_BOOK } from '../utils/mutations';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\n  \n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await saveBook({\n        variables: {\n          input: bookToSave,\n        },\n      });\n\n      if (!response) {\n        throw new Error('something went wrong!');\n      }\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/pages/SavedBooks.js",["58","59"],"import React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\n\nimport Auth from '../utils/auth';\nimport { removeBookId, saveBookIds } from '../utils/localStorage';\nimport { GET_ME } from '../utils/queries';\nimport { DELETE_BOOK } from '../utils/mutations';\n\nconst SavedBooks = () => {\n  const { loading, data } = useQuery(GET_ME);\n  const userData = data?.me || [];\n\n  const [deleteBook, { error }] = useMutation(DELETE_BOOK);\n\n  // use this to determine if `useEffect()` hook needs to run again\n  const userDataLength = Object.keys(userData).length;\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await deleteBook({\n        variables: { bookId: bookId }\n      });\n\n      if (!response) {\n        throw new Error('something went wrong!');\n      }\n\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (!userDataLength) {\n    return <h2>LOADING...</h2>;\n  }\n\n  const savedBookIds = userData.savedBooks.map((book) => book.bookId);\n  saveBookIds(savedBookIds);\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/components/Navbar.js",[],"/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/utils/mutations.js",[],"/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/utils/auth.js",[],"/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/utils/API.js",[],"/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/utils/localStorage.js",[],"/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/utils/queries.js",[],"/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/components/SignupForm.js",["60"],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { CREATE_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  const [createUser, { error }] = useMutation(CREATE_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await createUser({ variables: { ...userFormData },\n      });\n      Auth.login(data.createUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n    setUserFormData({\n      username: '',\n      email: '',\n      password: ''\n    });\n  }\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/components/LoginForm.js",["61"],"// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":25,"column":22,"nodeType":"68","messageId":"69","endLine":25,"endColumn":27},{"ruleId":"66","severity":1,"message":"70","line":11,"column":11,"nodeType":"68","messageId":"69","endLine":11,"endColumn":18},{"ruleId":"66","severity":1,"message":"67","line":14,"column":24,"nodeType":"68","messageId":"69","endLine":14,"endColumn":29},{"ruleId":"66","severity":1,"message":"67","line":14,"column":24,"nodeType":"68","messageId":"69","endLine":14,"endColumn":29},{"ruleId":"66","severity":1,"message":"67","line":11,"column":19,"nodeType":"68","messageId":"69","endLine":11,"endColumn":24},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]