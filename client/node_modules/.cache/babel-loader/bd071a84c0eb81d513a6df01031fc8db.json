{"ast":null,"code":"var _jsxFileName = \"/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/pages/SavedBooks.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport Auth from '../utils/auth';\nimport { removeBookId, saveBookIds } from '../utils/localStorage';\nimport { GET_ME } from '../utils/queries';\nimport { DELETE_BOOK } from '../utils/mutations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SavedBooks = () => {\n  _s();\n\n  const {\n    loading,\n    data\n  } = useQuery(GET_ME);\n  const userData = (data === null || data === void 0 ? void 0 : data.me) || [];\n  const [deleteBook, {\n    error\n  }] = useMutation(DELETE_BOOK); // use this to determine if `useEffect()` hook needs to run again\n\n  const userDataLength = Object.keys(userData).length; // create function that accepts the book's mongo _id value as param and deletes the book from the database\n\n  const handleDeleteBook = async bookId => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await deleteBook({\n        variables: {\n          bookId: bookId\n        }\n      });\n\n      if (!response) {\n        throw new Error('something went wrong!');\n      } // upon success, remove book's id from localStorage\n\n\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  }; // if data isn't here yet, say so\n\n\n  if (!userDataLength) {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"LOADING...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  }\n\n  const savedBookIds = userData.savedBooks.map(book => book.bookId);\n  saveBookIds(savedBookIds);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n      fluid: true,\n      className: \"text-light bg-dark\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Viewing saved books!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: userData.savedBooks.length ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:` : 'You have no saved books!'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardColumns, {\n        children: userData.savedBooks.map(book => {\n          return /*#__PURE__*/_jsxDEV(Card, {\n            border: \"dark\",\n            children: [book.image ? /*#__PURE__*/_jsxDEV(Card.Img, {\n              src: book.image,\n              alt: `The cover for ${book.title}`,\n              variant: \"top\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 31\n            }, this) : null, /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: book.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small\",\n                children: [\"Authors: \", book.authors]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: book.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"btn-block btn-danger\",\n                onClick: () => handleDeleteBook(book.bookId),\n                children: \"Delete this Book!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this)]\n          }, book.bookId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SavedBooks, \"HMY+AQwqhqiezWoWyxnMcHGm6Q8=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c = SavedBooks;\nexport default SavedBooks;\n\nvar _c;\n\n$RefreshReg$(_c, \"SavedBooks\");","map":{"version":3,"sources":["/Users/jacquelinehodgson/Desktop/UTorCoding/Homework/Book-Search-Engine/client/src/pages/SavedBooks.js"],"names":["React","Jumbotron","Container","CardColumns","Card","Button","useQuery","useMutation","Auth","removeBookId","saveBookIds","GET_ME","DELETE_BOOK","SavedBooks","loading","data","userData","me","deleteBook","error","userDataLength","Object","keys","length","handleDeleteBook","bookId","token","loggedIn","getToken","response","variables","Error","err","console","savedBookIds","savedBooks","map","book","image","title","authors","description"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\n\nimport Auth from '../utils/auth';\nimport { removeBookId, saveBookIds } from '../utils/localStorage';\nimport { GET_ME } from '../utils/queries';\nimport { DELETE_BOOK } from '../utils/mutations';\n\nconst SavedBooks = () => {\n  const { loading, data } = useQuery(GET_ME);\n  const userData = data?.me || [];\n\n  const [deleteBook, { error }] = useMutation(DELETE_BOOK);\n\n  // use this to determine if `useEffect()` hook needs to run again\n  const userDataLength = Object.keys(userData).length;\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await deleteBook({\n        variables: { bookId: bookId }\n      });\n\n      if (!response) {\n        throw new Error('something went wrong!');\n      }\n\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (!userDataLength) {\n    return <h2>LOADING...</h2>;\n  }\n\n  const savedBookIds = userData.savedBooks.map((book) => book.bookId);\n  saveBookIds(savedBookIds);\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n"]},"metadata":{},"sourceType":"module"}