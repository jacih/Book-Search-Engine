{"version":3,"sources":["utils/mutations.js","utils/auth.js","utils/localStorage.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["ADD_USER","gql","LOGIN","SAVE_BOOK","DELETE_BOOK","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","error","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","input","data","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","deleteBook","useQuery","loading","userData","me","handleDeleteBook","log","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","ApolloProvider","exact","path","element","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d508f77b.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\n\nexport const SAVE_BOOK = gql`\n  mutation saveBook($input: SavedBook!) {\n    saveBook(input: $input) {\n      _id\n      username\n      email\n      bookCount\n      savedBooks {\n        bookId\n        title\n        authors\n        image\n        description\n        link\n      }\n    }\n  }\n`;\n\nexport const DELETE_BOOK = gql`\n  mutation deleteBook($bookId: ID!) {\n  deleteBook(bookId: $bookId) {\n      _id\n      username\n      email\n      bookCount\n      savedBooks {\n        bookId\n        title\n        authors\n        image\n        description\n        link\n      }\n    }\n  }\n`;","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport { useMutation } from '@apollo/react-hooks';\nimport { SAVE_BOOK } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { saveBook, searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nconst SearchBooks = () => {\n\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  const [searchInput, setSearchInput] = useState('');\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\n\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    if (!searchInput) {\n      return false;\n    }\n    try {\n      const response = await searchGoogleBooks(searchInput);\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n      const { items } = await response.json();\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n\n  const handleSaveBook = async (bookId) => {\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    if (!token) {\n      return false;\n    }\n    try {\n      const { data } = await saveBook({\n        variables: { input: bookToSave },\n      });\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import gql from \"graphql-tag\";\n\nexport const GET_ME = gql`\n  {\n    me {\n      _id\n      username\n      email\n      bookCount\n      savedBooks {\n        bookId\n        title\n        authors\n        image\n        description\n        link\n      }\n    }\n  }\n`;","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { GET_ME } from '../utils/queries';\nimport { DELETE_BOOK } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n  const [deleteBook, { error }] = useMutation(DELETE_BOOK);\n  const { loading, data } = useQuery(GET_ME);\n  const userData = data?.me || {};\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n    try {\n      const { data } = await deleteBook({\n        variables: { bookId },\n      });\n      console.log(data);\n      if (error) {\n        throw new Error('something went wrong!');\n      }\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/react-hooks';\nimport {ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: {...userFormData },\n      });\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { useMutation } from '@apollo/react-hooks';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [login, { error }]=useMutation(LOGIN);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\n\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token');\n\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n  uri: '/graphql',\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Routes>\n            <Route exact path='/' element={<SearchBooks />} />\n            <Route exact path='/saved' element={<SavedBooks />} /> \n            <Route render = {() => <h1 className='display-2'>Wrong page!</h1>}/>\n          </Routes>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}